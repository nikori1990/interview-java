<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Interview - Java</title>
    <link>https://nikori1990.github.io/interview-java/posts/</link>
    <description>Recent content in Posts on Interview - Java</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 08 Apr 2021 06:29:39 +0800</lastBuildDate><atom:link href="https://nikori1990.github.io/interview-java/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basis</title>
      <link>https://nikori1990.github.io/interview-java/posts/basis/</link>
      <pubDate>Thu, 08 Apr 2021 06:29:39 +0800</pubDate>
      
      <guid>https://nikori1990.github.io/interview-java/posts/basis/</guid>
      <description>1. 基础  1.1. 正确使用 equals 方法 [1.2. 整型包装类值的比较] [1.3. BigDecimal]  [1.3.1. BigDecimal 的用处] [1.3.2. BigDecimal 的大小比较] [1.3.3. BigDecimal 保留几位小数] [1.3.4. BigDecimal 的使用注意事项] [1.3.5. 总结]      1. 基础1.1. 正确使用 equals 方法Object 的 equeals 方法容易抛空指针异常， 应使用常量或确定有值的对象来调用 equals 。
举个例子:
// 不能使用一个值为null的引用类型变量来调用非静态方法， 否则会抛出异常 String str = null; if(str.equals(&amp;#34;nikori&amp;#34;)) { ... } else { ... } 运行上面的程序会抛出空指针异常，但是我们把第二行的条件判断语句改为下面这样的花，就不会抛出空指针异常， else 语句块得到执行。</description>
    </item>
    
    <item>
      <title>Spring5</title>
      <link>https://nikori1990.github.io/interview-java/posts/spring5/</link>
      <pubDate>Fri, 26 Mar 2021 11:17:51 +0800</pubDate>
      
      <guid>https://nikori1990.github.io/interview-java/posts/spring5/</guid>
      <description>Spring 框架概述 Spring 是轻量级的开源的 JavaEE 框架 Spring 可以解决企业应用开发的复杂性 Spring 有两个核心部分： IOC 和 AOP  IOC: 控制反转， 把创建对象的过程交给Spring进行管理 AOP: 面向切面， 不修改源代码进行功能增强   Spring 特点  方便解耦 AOP编程支持 方便程序测试 方便和其他框架进行整合 方便进行事物操作 降低API开发难度     IOC （概念和原理）
   什么是IOC
 控制反转， 把对象创建和对象之间的调用过程，交给Spring进行管理 使用IOC目的， 为了耦合度降低    IOC底层原理
 xml 解析 工厂模式 反射     Spring 提供 IOC 容器实现两种方式： （两个接口）
  BeanFactory  IOC 容器基本实现，是Spring内部的使用接口，不提供开发人员进行使用接口加载配置文件的时候不会创建对象，在获取（使用）对象时才会去创建对象ApplicationContext  BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用加载配置文件的时候创建对象ApplicationContext 接口的实现类  FileSystemXmlApplicationContext 全路径 ClassPathXmlApplicationContext 相对项目路径     IOC 操作 Bean 管理</description>
    </item>
    
  </channel>
</rss>
